# --------------------------
# SAMPLE CONFIGURATION
# --------------------------

spring:
  cloud:

    # For more info about Spring Cloud Stream and the Solace PubSub+ binder:
    # - https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html
    # - https://github.com/SolaceProducts/solace-spring-cloud/tree/master/solace-spring-cloud-starters/solace-spring-cloud-stream-starter
    stream:
      bindings:  # Workflow bindings
        input-0:
          destination: DEV.QUEUE.1  # Queue name
          binder: jms
        output-0:
          destination: topic/name       # Topic name
          binder: solace
#        input-1:
#          destination: DEV.QUEUE.1     # Queue name
#          binder: jms
#        output-1:
#          destination: Solace/Topic/1  # Topic name
#          binder: solace
      jms:
        default:
          consumer:
            destination-type: queue    # valid values are [ queue | topic | unknown ]
#            batch-max-size: 255
#            transacted: false
          producer:
            destination-type: topic    # valid values are [ queue | topic | unknown ]
#            transacted: true

#      binding-retry-interval: 30      # The interval (in seconds) between retrying binding creation. Set it to zero to treat such conditions as fatal, preventing the application from starting.

solace:
  connector:
    workflows:  # Workflow configuration
      0:
        enabled: true  # If true, the workflow is enabled.
#      1:
#        enabled: true  # If true, the workflow is enabled.

#        transform-headers:  # Per-Processor headers transform configuration
#          expressions:  # A mapping of header names to header value SpEL expressions. The SpEL context contains the `headers` parameter which can be used to read the input message’s headers.
#            new-header: "'prefix-' + headers.id"  # Example
#        transform-payloads:  # Per-Processor payloads transform configuration
#          expressions:  # A list of a single transformation as a SpEL expression
#            - transform: "#isPayloadBytes(payload) ? new String(payload).toUpperCase() : payload instanceof T(String) ? payload.toUpperCase() : payload"  # Example

#    management:
#      leader-election:
#        mode: standalone  # The connector’s leader election mode. (values: standalone, active_active, active_standby)
#        fail-over:
#          max-attempts: 3  # The maximum number of attempts to perform a fail-over.
#          back-off-initial-interval: 1000  # The initial interval (milliseconds) to back-off when retrying a fail-over.
#          back-off-max-interval: 10000  # The maximum interval (milliseconds) to back-off when retrying a fail-over.
#          back-off-multiplier: 2.0  # The multiplier to apply to the back-off interval between each retry of a fail-over.
#      queue: management-queue  # The management queue name.
#      session:  # The management session. This has the same interface as that used by `solace.java.*`. For more info: https://github.com/SolaceProducts/solace-spring-boot/tree/master/solace-spring-boot-starters/solace-java-spring-boot-starter#updating-your-application-properties
#        host: tcp://localhost:55555
#        client-username: default
#        client-password: default

    security:
      enabled: true  # If true, security is enabled. Otherwise, anyone has access to the connector's endpoints.
#      users:  # User configuration. To access endpoints when security is enabled, at least one user must be created.
#        - name:  # The name of this user.
#          password:  # The password for this user.
#          roles:  # The list of roles which this user has. Has read-only access if no roles are given. (values: admin)
#            - admin

  java:  # Solace PubSub+ connection details. For more info: https://github.com/SolaceProducts/solace-spring-boot/tree/master/solace-spring-boot-starters/solace-java-spring-boot-starter#updating-your-application-properties
    connect-retries: -1
    reconnect-retries: -1
#    host: tcp://localhost:55555
#    msg-vpn: default
#    client-username: default
#    client-password: default

ibm:  # IBM MQ connection details
  mq:
    user: admin
    password: admin
    channel: DEV.ADMIN.SVRCONN
    queue-manager: QM1
    conn-name: localhost(1414)
#    additional-properties:
#      WMQ_CLIENT_RECONNECT_TIMEOUT_DEFAULT: 1000

#jms-binder:  # Config options specific to the JMS binder
#  health-check:  # Config options to control when the JMS binder's health status transitions from 'RECONNECTING' to 'DOWN'
#    interval: 10000  # The length of time (in ms) between reconnection attempts
#    reconnect-attempts-until-down: 10  # The number of unsuccessful reconnection attempts until health status transitions to 'DOWN'
#  jndi:
#    context:  # Configuration of the jndi service provider. Required for any jndi lookup.
#      java.naming.factory.initial: # Example: com.sun.jndi.fscontext.RefFSContextFactory
#      java.naming.provider.url: # Example: file:/path/to/file
#    connection-factory:  # Configure a connection factory lookup. Takes effect when jms-binder.jndi.context is configured.
#      name: # Example: DEMO_CF
#      user: # Example: admin
#      password: # Example: passw0rd

management:
#  <system>:  # Metrics monitoring systems. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics
#    metrics:
#      export:
#        enabled: false
#  defaults:
#    metrics:
#      export:
#        enabled: false
  simple:
    metrics:
      export:
        enabled: true
#  endpoint:
#    env:
#      show-values: WHEN_AUTHORIZED  # Required for Connector-Manager integration. Must be set to `ALWAYS` when solace.connector.security.enabled = false
#    health:
#      show-components: never
#      show-details: never
#  endpoints:
#    web:  # Actuator web endpoint configuration. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.
#      exposure:
#        include: "health,metrics,loggers,logfile,channels,env,workflows,leaderelection,bindings,info"

#logging:  # Logging configuration. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging
#  level:
#    root: WARN
#    com.solace.connector.jms: WARN # Enables logs for connector
#    com.solace.connector.core: WARN # Enables logs for connector framework
#    com.solace.spring.cloud.stream.binder: WARN # Enables logs for Solace and JMS binders
#  file:
#    name: myapp.log  # base log file name. Example: Generates a log file to a file named myapp.log.
#  logback:
#    rollingpolicy:  # Logback file rolling policy
#      file-name-pattern: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"  # Pattern for rolled-over log file names. Example: Rolls the log file into an archive once every day. `%i` is reset to `0` at the start of the day.
#      max-file-size: 100MB  # The maximum size of log file before it is archived. Example: Within a given day, when the log file reaches 100 MB, archive it, and increment `%i`.
#      max-history: 7  # The maximum rotation-period's worth of archive log files to keep. Example: Since the `file-name-pattern` is configured to rollover once every day, keep 7 days worth of log archives.
#      total-size-cap: 1GB  # Total size of log backups for a given rotation period. Example: Keep up-to 1 GB of log archives for every day.

#server:
#  port: 8090
